import time
import struct
import socket
import threading
from queue import Queue
from pyrf24 import RF24, RF24_PA_LOW, RF24_DRIVER


# Set radio_1 CE, CSN PIN
CSN_PIN_1 = 0 #SPI0 CE0 -> spidev 0.0
if RF24_DRIVER == 'MRAA':
    CE_PIN_1 = 15
elif RF24_DRIVER == 'wiringPi':
    CE_PIN_1 = 3
else:
    CE_PIN_1 = 22

radio_1 = RF24(CE_PIN_1, CSN_PIN_1)

# Set radio_2 CE, CSN PIN
CSN_PIN_2 = 10 #SPI1 CE0 -> spidev1.0
if RF24_DRIVER == 'MRAA':
    CE_PIN_2 = 32
elif RF24_DRIVER == 'wiringPi':
    CE_PIN_2 = 26
else:
    CE_PIN_2 = 12

radio_2 = RF24(CE_PIN_2, CSN_PIN_2)

if not radio_1.begin():
    raise RuntimeError("radio_1 hardware is not responding")

if not radio_2.begin():
    raise RuntimeError("radio_2 hardware is not responding")

address = [b"1Node", b"2Node"]

# radio_1 Hardware Setting
radio_1.setPALevel(RF24_PA_LOW)
radio_1.openReadingPipe(1, address[1])
radio_1.setChannel(0)  
radio_1.payloadSize = 32  # Set the payload size to the maximum for simplicity
radio_1.startListening()

# radio_2 Hardware Setting
radio_2.setPALevel(RF24_PA_LOW)
radio_2.openWritingPipe(address[0])
radio_2.setChannel(100)  
radio_2.payloadSize = 32

data_list =[
    b'\x08\x05\xca\x91\x00)\x00\x0fP\x83\xa1F\x00\x00\x00\x00\x00\x01\xe03\xff\xff%\x00C\x0e\x00\x00\x14LF\xa1@B\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    b'\x08\x04\xd4\xb6\x01%\x00\x0fP\x83\xbb\x0b\x00\x00\x00\x00\x00\x01\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x02\x00\x14\x00(F\x0f\x00[\xba\xdd\x9aGPS_APP.ExampleTable\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    b'\x08\x03\xca\xad\x00%\x00\x0fP\x83\xbdo\x00\x00\x00\x00\x00\x02\x1b\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x01\x00\x14\x00\x10\x0c\x00\x00,\xea\x07\x00'
    b'\x08\x04\xd4\xb7\x01%\x00\x0fP\x84:\xe2\x00\x00\x00\x00\x00\x01\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x02\x00\x14\x00(F\x0f\x00[\xba\xdd\x9aGPS_APP.ExampleTable\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    b'\x08\x01\xca\xca\x00\x99\x00\x0fP\x84?\xfe\x00\x00\x00\x00\x00\x01\x01\x06\x00\x01\x01\x01g\x00S\x00\x01\x00\x00\x00\x01\x00\x11\x00\x03\x00\x01\x00\x02\x00\x11\x00)\x00\x01\x0f\x03\x00\x11\x00\x1b\x00\x01\x00\x04\x00\x11\x00\x03\x00\x01\x00\x05\x00\x11\x00\x02\x00\x01\x00\x06\x00\x11\x00\x02\x00\x01\x00\x07\x00\x11\x00\x01\x00\x01\x00\x08\x00\x11\x00\x11\x00\x01\x00\t\x00\x11\x00\x05\x00\x01\x00\n\x00\x11\x00\x01\x00\x01\x00\x0c\x00\x11\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
]

def send_data():
    while True:
        for data in data_list:
            for i in range(0,len(data),32):
                chunk = data[i:i+32]
                radio_2.write(chunk)
                print(f"Sent chunk: {chunk}")
            time.sleep(0.2)
            
if __name__ == "__main__":
    try:
        send_data()
    except KeyboardInterrupt:
        print("Exiting program")
    finally:
        radio_1.powerDown()
        radio_2.powerDown()
        
        
